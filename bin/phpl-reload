#!/usr/bin/env php
<?php

require_once __DIR__."/../lib/bootstrap.php";
require_once __DIR__."/../lib/config.php";

function print_help() {
    printf("phpl-reload: Activate changes to the configuration\n\n");
    printf("Usage:      %s [options..]\n", basename($GLOBALS['argv'][0]));
    printf("\n");
    printf("Options:    --help                  Show this help\n");
    printf("            -q,--quiet              Show no output\n");
    printf("            --prompt                Update the prompt\n");
    printf("            --theme                 Update the theme\n");
    printf("            --all                   Update everything (default)\n");
    printf("\n");
}

$opts = cmdl_parse("hq",[
    "h" =>  "help",
    "q" =>  "quiet",
            "prompt",
            "theme",
            "all"
]);

if (cmdl_get($opts,'help')) {
    print_help();
    exit(0);
}

define("QUIET",(bool)cmdl_get($opts,'quiet'));

function reload_prompt() {
    global $_MODULES;

    $mods = [];
    $items = config_item_list();
    $segments = [];
    foreach ($items as $item) {
        if (!in_array($item[1],$mods)) {
            $mods[] = $item[1];
        }
        $attr = $item[2];
        if (!array_key_exists($item[1],$_MODULES)) {
            fprintf(STDERR, "Invalid module in prompt: %s\n", $item[1]);
            continue;
        }
        $opts = $_MODULES[$item[1]]->opts;
        $defs = []; $type = []; $maps = [];
        foreach ($opts as $opt) {
            $defs[$opt->key] = $opt->def;
            $type[$opt->name] = $opt->type;
            $maps[$opt->name] = $opt->key;
        }
        // Coerce types
        $aout = [];
        foreach ($attr as $k=>$v) {
            if (array_key_exists($k,$type)) {
                switch ($type[$k]) {
                    case 'boolean':
                        $attr[$k] = (bool)$v;
                        break;
                    case 'int':
                        $attr[$k] = (int)$v;
                        break;
                    case 'string':
                        $attr[$k] = (string)$v;
                        break;
                    default:
                        QUIET or printf("Warning: Unknown option type %s", $type[$k]);
                }
                $aout[$maps[$k]] = $v;
            }
        }
        $segments[] = sprintf("_%s(%s)", $item[1], var_export(array_merge($defs,$aout),true));
    }

    $modsrc = [];
    foreach ($mods as $mod) {
        $src = $_MODULES[$mod]->src;
        $body = trim(str_replace("<?php","",php_strip_whitespace($src)));
        $body = preg_replace("/module\(.+?\);/","",$body);
        $body = preg_replace("/option\(.+?\);/","",$body);
        $modsrc[] = $body;
    }


    $prompt = join("\n", $modsrc)."\n";
    $prompt.= sprintf("generate(%s);", join(",",$segments));

    file_put_contents(PHPL_CACHE_PROMPT, "<?php {$prompt}");

}

function reload_theme() {
    global $_CONFIG;

    $style = null;

    $theme = $_CONFIG['theme'];

    $theme_file = __DIR__."/../themes/{$theme}.theme";
    if (!file_exists($theme_file)) {
        printf("Error: The theme %s could not be found at %s\n", $theme, $theme_file);
        exit(1);
    }
    $data = array_map("trim",file($theme_file,FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES));
    $vars = [];
    $rules = [];
    $rule = null;
    
    $pragma_256color = false;
    $pragma_truecolor = false;

    foreach ($data as $line) {
        if (substr($line,0,2)=="//") {
            continue;
        } elseif (preg_match("/\\\$pragma\((.+?)\)/", $line, $match)) {
            switch ($match[1]) {
                case '256color':
                    $pragma_256color = true;
                    break;
                case 'truecolor':
                    $pragma_truecolor = true;
                    break;
                default:
                    printf("Warning: Unrecognized pragma %s\n", $match[1]);
            }
        } elseif (preg_match("/\\\$set\((.+?),(.+?)\)/", $line, $match)) {
            $vars[$match[1]] = $match[2];
        } elseif (strpos($line,'{')!==false) {
            $rule = explode(' ',trim($line,'{ '));
            foreach ($rule as $r) {
                $rules[$r] = [];
            }
        } elseif ($line == '}') {
            $rule = null;
        } else {
            if (!$rule) {
                printf("Unexpected %s\n", $line);
                continue;
            }
            list($k,$v) = array_map('trim',explode(":",$line));
            $val = trim($v,'; ');
            if ($val[0]=='"') { $val = trim($val,'"'); }
            elseif ($val[0]=="'") { $val = trim($val,"'"); }
            elseif ($val[0]=="%") { $val = $vars[substr($val,1)]; }
            foreach ($rule as $r) {
                $rules[$r][$k] = $val;
            }
        }
    }

    if ($pragma_truecolor) {
        $head = 'define("PRAGMA_TRUECOLOR", true);';
    } elseif ($pragma_256color) {
        $head = 'define("PRAGMA_256COLOR", true);';
    } else {
        $head = null;
    }

    $style = '$_THEME = new Theme('.var_export($rules,true).');';

    file_put_contents(PHPL_CACHE_THEME, "<?php {$head} {$style}");

}

function rebuild() {

    $loader = php_strip_whitespace(__DIR__."/../lib/generate.php");
    $theme = php_strip_whitespace(PHPL_CACHE_THEME);
    $prompt = php_strip_whitespace(PHPL_CACHE_PROMPT);

    $state = $loader . substr($theme,6) . substr($prompt,6);

    file_put_contents(PHPL_STATE, $state);
}


scan_modules();
config_read();
if (cmdl_get($opts,'prompt')) {
    reload_prompt();
} elseif (cmdl_get($opts,'theme')) {
    reload_theme();
} else {
    reload_prompt();
    reload_theme();
}
rebuild();